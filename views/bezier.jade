html
  link(href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css", rel='stylesheet', crossorigin="anonymous")
  link(href="css/bezier.css", rel='stylesheet')
  body
    .col-md-4
    .col-md-6.title-panel
    form
      .canvas_name
        input(placeholder='name' type='text' name='canvas_name' required)
      button.save.UIbtn SAVE
    .saved.onsave-msg Saved!
    .presence-error.onsave-msg Please name your drawing first.
    button.load.UIbtn LOAD
    .menu.loadable
      .load_menu
    .instructions.loadable
      h2 HINT
      li Click to create endpoint
      li Move & repeat
      li Move & observe
      li Click to finish
      li Repeat & have fun

    .viewers
      h3 Spectating
      ul
    .coordinate-log
    canvas#canvas
    canvas#tmpCanvas
    canvas#crosshairCanvas
    script(src='/js/point.js')
    script(src='/js/crosshair.js')
    script(src='/js/canvas_state.js')
    script(src='/js/array_plugin.js')
    script(src='https://code.jquery.com/jquery-3.2.1.min.js'
          integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4='
          crossorigin='anonymous')
    // exposes the client variable
    script(src='/js/bezier/client.js')
    script(src='/js/bezier/touchControls.js')
    script(src='/js/bezier/drawMethods.js')
    script.
      var tmpCanvasDraw = function(curve, ctx){
        Clear(ctx);
        curve.draw(ctx);
      }
      var setCanvasSize = function(canvas){
        canvas.width = window.innerWidth
        canvas.height = window.innerHeight
      }
      var debug = false;
      var canvasState = new CanvasState();
      canvasState.addPlugin(DrawMethods)
      var client = new Client();
      
      var canvas = document.getElementById('canvas');
      setCanvasSize(canvas);
      var ctx = canvas.getContext ( "2d" );
      ctx.save ();

      $tmpCanvas = $('#tmpCanvas');
      tmpCanvas = $('#tmpCanvas')[0];
      $crosshairCanvas = $('#crosshairCanvas');
      crosshairCanvas = $('#crosshairCanvas')[0];
      setCanvasSize(tmpCanvas);
      setCanvasSize(crosshairCanvas);
      var tmpCTX = tmpCanvas.getContext('2d');
      var crosshairCTX = crosshairCanvas.getContext('2d');
      Clear = function(ctx){
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      }


      tmpCTX.fillStyle = 'white';
      var _crosshairs = []
      var currentAnimationID;
      var _crosshairsRunning = true;
      var _crosshairCounter = 0;
      var _synced = false;
      var StopCrosshair = function(){
        _crosshairsRunning = false;
        _crosshairs = [];
        _synced = false;
      }
      var SyncCrosshairs = function(){
        _crosshairs.forEach(function(c){
          c.r = 15;
        })
        _synced = true;
      }
      var DrawCrosshair = function(rootPoint, ctx){
        _crosshairsRunning = true;
        var crosshair = new Crosshair(rootPoint, (1 / 24) * Math.PI)
        _crosshairs.push(crosshair)
        var loop = function(){
          Clear(ctx);
          if(!_crosshairsRunning){
            cancelAnimationFrame(currentAnimationID);
            return
          }
          if(_crosshairs.length == 2 && !_synced)
            SyncCrosshairs();
          _crosshairs.forEach(function(c){
            c.draw(ctx)
            c.angle += (1 / 24) * Math.PI;
            if(_crosshairCounter % 4 == 0)
              c.toggleColor();
            if(_crosshairCounter % 3 == 0)
              c.toggleRadius();
          })

          _crosshairCounter++
          setTimeout(function(){
            currentAnimationID = requestAnimationFrame(loop);
          }, 200)

        }
        loop();
      }

      //- root = new Node(rootPoint)
      //- opts = { r: 100, theta: 0.785}
      //- var texture = new Texture(tmpCTX, root, opts)
      // texture.findOrCreateChildren(root)
      // texture.draw(new Point(0, 200))

      var radius = 5;
      var counter = 0;
      var bezierStartPoint;
      function Shape(point, radius){
        this.drawing = true;
        this.point = point;
        this.radius = radius;
        this.draw = function(){
          ctx.beginPath();
          ctx.arc(this.point.x, this.point.y, this.radius, 0, Math.PI*2);
          ctx.fillStyle = 'tomato';
          ctx.fill()
          ctx.closePath();
        }
      }
      myShapes = [];

      var controller = function(e){
        if(counter%2 == 0)
          startPoint(e);
        else
          endPoint(e);
        counter++;
      }

      var printCoordinate = function(point){
        $('.coordinate-log').text('coordinates x: ' + point.x + ' y: ' + point.y );
      }
      var mouseControls = function(e){
        var cp2 = new Point(e)
        return abstractDraw(DrawMethods.quadraticBezier, cp2)
      }
      var mobileControls = function(e){
        var cp2 = MobileControls.onTouchMove(e)
        return abstractDraw(DrawMethods.quadraticBezier, cp2)
      }
      var abstractDraw = function(method, cp2){
        var tmp = prepareBezier(cp2)
        var bezierPoints = method(tmp)
        return bezierDraw(bezierPoints)
      }
      var prepareBezier = function(cp2){
        var start = new Point(myShapes.nextToLast().point.x, myShapes.nextToLast().point.y)
        var end = new Point(myShapes.last().point.x, myShapes.last().point.y)
        return {begin: start, cp1: null, cp2: cp2, end: end}

      }
      var bezierDraw = function(points){
        var curve = new canvasState.curve(points.begin, points.cp1, points.cp2, points.end);
        canvasState.m_curve = curve;
        tmpCanvasDraw(curve, tmpCTX)
        if(debug)
          printCoordinate(cp2)
        // sockets
        client.send(JSON.stringify(curve.toJSON()));
      }
      // create tmp canvas based on two endpoints: first and last
      var startPoint = function(e){
        console.log('start')
        bezierStartPoint = new Point(e)
        circle = new Shape(bezierStartPoint, radius)
        //- circle.draw();
        DrawCrosshair(bezierStartPoint, crosshairCTX);
        myShapes.push(circle);
      }
      var endPoint = function(e){
        console.log('end')
        bezierEndPoint = new Point(e)
        circle = new Shape(bezierEndPoint, radius)
        //circle.draw();
        DrawCrosshair(bezierEndPoint, crosshairCTX);
        myShapes.push(circle);


        $tmpCanvas.off('mousedown', controller);

        console.log('Is Mobile? ' + window.isMobile)
        if(window.isMobile)
          $tmpCanvas.on('touchmove', mobileControls)
        else
          $tmpCanvas.on('mousemove', mouseControls);
        $tmpCanvas.on('mousedown', stopBezier);
      }
      stopBezier = function(e){
        $tmpCanvas = $('#tmpCanvas')
        $tmpCanvas.off('mousemove', mouseControls);
        $tmpCanvas.off('touchmove', mobileControls);

        StopCrosshair()
        canvasState.m_curve.draw(ctx);
        canvasState.saveNewCurve(ctx);
        var message = canvasState.m_curve.toJSON()
        message.permanent = true;

        client.send(JSON.stringify(message));
        //Clear(tmpCTX)

        $tmpCanvas.off('mousedown', stopBezier);
        $tmpCanvas.on('mousedown', controller);
      }
      DrawAll = function(){
        Clear();
        //- myShapes.forEach(function(circle){
        //-   circle.draw();
        //- })
        canvasState.curves.forEach(function(curve){
          curve.draw(ctx);
        })
      }



      $(document).ready(function() {
        window.mobileAndTabletcheck = function() {
          var check = false;
          (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
          return check;
        };
        window.isMobile = mobileAndTabletcheck()
        $tmpCanvas.on('mousedown', controller);
        $('.save').click(function(e){
          e.preventDefault()
          _name = $('input[name=canvas_name]').val()
          if(_name == ''){
            $(".presence-error").show();
            $(".presence-error").delay(4000).fadeOut(1000); 
            return;
          }
          $.ajax({
            url: '/bezier/save',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(canvasState.toJSON(_name)),
            success: function(){
              $(".saved").show();
              $(".saved").delay(2000).fadeOut(1000); 
            }
          })
        });

        $('.load').click(function(){
          self = $('.load');
          if(self.text() == 'LOAD') self.text('HIDE');
          else self.text('LOAD');
          $('.loadable').toggle();
          $.ajax({
            url: '/canvas/index',
            type: 'GET',
            contentType: 'application/json',
            success: function(data){
              $('.load_menu').empty();
              data.list.forEach(function(_canvas){
                $('.load_menu').append('<button class="canvas_indices" id="' + _canvas.id + '"> ' + _canvas.name + ' </button>')
                $('#' + _canvas.id).click(function(){
                  $.ajax({
                    url: '/bezier/load/' + _canvas.id,
                    type: 'GET',
                    contentType: 'application/json',
                    success: function(data){
                      Clear(ctx);
                      Clear(tmpCTX);
                      canvasState.load(data, ctx);
                    }
                  })
                })
              })
            }
          })
        })

        $('.viewers').on('specAdded', function(e, data){
          console.log('viewer added');
          $('.viewers').show();
          $('.viewers ul').append('<li>' + data.id + '</li>');
        })
        $(window).on('resize', function(e){
          setCanvasSize(tmpCanvas);
          setCanvasSize(canvas);
        })
        $('.load_menu').css('height', 0.6 * innerHeight +'px' );
      });